- name: Activate Jenkins
  hosts: master_server
  become: yes

  tasks:
  - name: read admin pwd
    shell: cat /var/lib/jenkins/secrets/initialAdminPassword
    register: adminpwd

  - name: read ssh key for git
    shell: cat /home/vlad/.ssh/id_rsa
    register: private_key
    delegate_to: 127.0.0.1
    become: true
    become_user: vlad

  - name: read ssh key for slave
    shell: cat /var/lib/jenkins/.ssh/slave-ca-central-1.pem
    register: slave_key

  - name: read slave ip
    shell: cat /home/vlad/project/Jenkins-AWS-server/ansible/prvt_ip
    register: slave_ip
    delegate_to: 127.0.0.1
    become: true
    become_user: vlad

  - name: unlock and add admin user
    jenkins_script:
      script: |
        import jenkins.model.*
        import hudson.security.*
        def instance = Jenkins.getInstance()
        def hudsonRealm = new HudsonPrivateSecurityRealm(false)
        hudsonRealm.createAccount('jenkins', '${user_pwd}')
        instance.setSecurityRealm(hudsonRealm)
        def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
        strategy.setAllowAnonymousRead(false)
        instance.setAuthorizationStrategy(strategy)
        instance.save()
      args:
        user_pwd: "123"
      user: admin
      password: "{{ adminpwd.stdout }}"

  - name: complete setup wizard
    jenkins_script:
      script: |
        import static jenkins.model.Jenkins.instance as jenkins
        import jenkins.install.InstallState
        if (!jenkins.installState.isSetupComplete()) {
          InstallState.INITIAL_SETUP_COMPLETED.initializeState()
        }
      user: admin
      password: "{{ adminpwd.stdout }}"

  - name: install plugin
    jenkins_plugin:
     name: "{{ item }}"
     state: latest
     url_username: admin
     url_password: "{{ adminpwd.stdout }}"
    with_items: 
    - "javax-activation-api"
    - "javax-mail-api"
    - "bouncycastle-api"
    - "instance-identity"
    - "ionicons-api"
    - "cloudbees-folder"
    - "mina-sshd-api-common"
    - "mina-sshd-api-core"
    - "sshd"
    - "antisamy-markup-formatter"
    - "structs"
    - "token-macro"
    - "build-timeout"
    - "credentials"
    - "trilead-api"
    - "ssh-credentials"
    - "workflow-step-api"
    - "plain-credentials"
    - "credentials-binding"
    - "scm-api"
    - "workflow-api"
    - "commons-lang3-api"
    - "timestamper"
    - "caffeine-api"
    - "script-security"
    - "jaxb"
    - "snakeyaml-api"
    - "jackson2-api"
    - "commons-text-api"
    - "plugin-util-api"
    - "font-awesome-api"
    - "popper2-api"
    - "bootstrap5-api"
    - "jquery3-api"
    - "echarts-api"
    - "display-url-api"
    - "workflow-support"
    - "checks-api"
    - "junit"
    - "matrix-project"
    - "resource-disposer"
    - "ws-cleanup"
    - "ant"
    - "apache-httpcomponents-client-4-api"
    - "jdk-tool"
    - "command-launcher"
    - "ace-editor"
    - "workflow-scm-step"
    - "workflow-cps"
    - "durable-task"
    - "workflow-durable-task-step"
    - "workflow-job"
    - "jakarta-activation-api"
    - "jakarta-mail-api"
    - "mailer"
    - "workflow-basic-steps"
    - "gradle"
    - "pipeline-milestone-step"
    - "pipeline-build-step"
    - "variant"
    - "pipeline-groovy-lib"
    - "pipeline-model-api"
    - "pipeline-stage-step"
    - "pipeline-model-extensions"
    - "branch-api"
    - "workflow-multibranch"
    - "pipeline-stage-tags-metadata"
    - "jsch"
    - "git-client"
    - "pipeline-input-step"
    - "pipeline-model-definition"
    - "workflow-aggregator"
    - "jjwt-api"
    - "okhttp-api"
    - "github-api"
    - "git"
    - "github"
    - "github-branch-source"
    - "pipeline-github-lib"
    - "pipeline-graph-analysis"
    - "pipeline-rest-api"
    - "momentjs"
    - "pipeline-stage-view"
    - "ssh-slaves"
    - "matrix-auth"
    - "pam-auth"
    - "ldap"
    - "email-ext"
    - "locale"

  - name: restart jenkins
    systemd: name=jenkins state=restarted

  - name: create credentials for git
    jenkins_script:
      script: |
        import jenkins.model.Jenkins
        import com.cloudbees.plugins.credentials.domains.Domain
        import com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey
        import com.cloudbees.plugins.credentials.CredentialsScope

        instance = Jenkins.instance
        domain = Domain.global()
        store = instance.getExtensionList(
          "com.cloudbees.plugins.credentials.SystemCredentialsProvider")[0].getStore()

        privateKey = new BasicSSHUserPrivateKey.DirectEntryPrivateKeySource("""${private_key}""")

        sshKey = new BasicSSHUserPrivateKey(
          CredentialsScope.GLOBAL,
          "ssh-git-key-id",
          "VlN9",
          privateKey,
          null,
          "ssh-key-for-git"
        )

        store.addCredentials(domain, sshKey)
      args:
        private_key: "{{ private_key.stdout }}"
      user: admin
      password: "{{ adminpwd.stdout }}"

  - name: create credentials for slave node
    jenkins_script:
      script: |
        import jenkins.model.Jenkins
        import com.cloudbees.plugins.credentials.domains.Domain
        import com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey
        import com.cloudbees.plugins.credentials.CredentialsScope

        instance = Jenkins.instance
        domain = Domain.global()
        store = instance.getExtensionList(
          "com.cloudbees.plugins.credentials.SystemCredentialsProvider")[0].getStore()

        privateKey = new BasicSSHUserPrivateKey.DirectEntryPrivateKeySource("""${private_key}""")

        sshKey = new BasicSSHUserPrivateKey(
          CredentialsScope.GLOBAL,
          "slave-ssh-key-id",
          "ec2-user",
          privateKey,
          null,
          "ssh-key-for-jenkins-slave"
        )

        store.addCredentials(domain, sshKey)
      args:
        private_key: "{{ slave_key.stdout }}"
      user: admin
      password: "{{ adminpwd.stdout }}"

  - name: configure slave node
    jenkins_script:
      script: |
        import jenkins.model.*
        import hudson.security.*
        import hudson.slaves.*
        import hudson.plugins.sshslaves.*
        import hudson.plugins.sshslaves.verifiers.*
        import hudson.model.*
          
        SLAVE_IP_ADDR="${private_ip}"
        SLAVE_CREDENTIALS="slave-ssh-key-id"

        SLAVE_NODE_LABEL="wagtail-node"


        println "create a slave node.. \n\r"
        Slave slave_node = new DumbSlave(
        "Wagtail-slave-node",
        "This is slave node for provision wagtail app",
        "/home/ec2-user",
        "1",
        Node.Mode.EXCLUSIVE,
        SLAVE_NODE_LABEL,
        new SSHLauncher (SLAVE_IP_ADDR, 22, SLAVE_CREDENTIALS, "", "", "", "", 0, 3, 30, new ManuallyTrustedKeyVerificationStrategy(false)),
        new RetentionStrategy.Always(),
        new LinkedList()
        )
        Jenkins.instance.addNode(slave_node)
      args:
        private_ip: '{{ slave_ip.stdout }}'
      user: admin
      password: "{{ adminpwd.stdout }}"

  - name: install lib
    shell: pip3 install python-jenkins

  - name: create job for deploy wagtail infra
    jenkins_job:
      config: "{{ lookup('file', '/home/vlad/project/Jenkins-AWS-server/wagtail-apply.xml') }}"
      name: Wagtail-provision-infra
      password: "123"
      url: http://jenkins.vln.ink
      user: jenkins